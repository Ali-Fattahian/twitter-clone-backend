{"version":3,"file":"static/js/783.fca868d7.chunk.js","mappings":"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","sources":["components/LikeButton.js","components/Modal/ErrorMessage.js","components/Reply/AddReply.js","components/SaveTweet.js","components/UnlikeButton.js","components/Tweet/TweetDetail.js","components/Reply/Reply.js","components/Reply/ReplyList.js","pages/TweetDetailPage.js","webpack://frontend/./src/components/Reply/Reply.module.css?fbc2"],"sourcesContent":["import React from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport axiosInstance from \"../axiosInstance\";\n\nconst LikeButton = (props) => {\n  const navigate = useNavigate()  \n  const isLoggedIn = !!localStorage.getItem(\"authTokens\");\n\n  const likeHandler = async (e) => {\n    e.stopPropagation()\n    if (!isLoggedIn) {\n      navigate(\"/login\");\n    } else {\n      const response = await axiosInstance.post(`like-tweet/${props.tweetId}`);\n      if (response.status === 201) {\n        props.setFakeLikeNumber(prevNum => prevNum +1)\n        props.setLikeClicked(true)\n      }\n    }\n  };\n  return (\n    <div>\n      <i className=\"fa fa-heart-o\" onClick={likeHandler} />\n      <p>{props.likes}</p>\n    </div>\n  );\n};\n\nexport default LikeButton;\n","import * as ReactDOM from \"react-dom\";\n\nconst ErrorMessage = (props) => {\n  return (\n    <div className=\"error_message__container\">\n      <div className=\"error-message__modal\">\n        {props.errorMessage}\n        <div>\n          <button className=\"btn\" onClick={props.onClose}>\n            Close\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nReactDOM.createPortal(ErrorMessage, document.getElementById(\"root\"));\n\nexport default ErrorMessage;\n","import React, { useContext, useRef } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport classes from \"./Reply.module.css\";\nimport Profile from \"../Tweet/default_profile.png\";\nimport { AuthContext } from \"../../store/auth-context\";\nimport axiosInstance from \"../../axiosInstance\";\n\nconst AddReply = (props) => {\n  const replyContent = useRef(\"\");\n  const { userData } = useContext(AuthContext)\n\n  const formSubmitHandler = (e) => {\n    e.preventDefault();\n\n    if (!!userData) {\n      if (replyContent.current.value.trim().length > 0) {\n        sendData();\n      }\n    } else {\n      props.onError(\n        <p>\n          Please <Link to=\"/login\">login</Link> before adding a tweet.\n        </p>\n      );\n    }\n  };\n\n  async function sendData() {\n    const response = await axiosInstance.post(`tweets/${props.tweetId}/reply`, {\n      text: replyContent.current.value,\n    });\n\n    if (response.status === 201) {\n      props.setNewReply(response.data.id);\n      replyContent.current.value = \"\";\n      return;\n    }\n  }\n\n  return (\n    <div className={classes[\"reply-section\"]}>\n      <div className={classes[\"close-reply__section\"]}>\n        <i\n          className=\"fa fa-times\"\n          aria-hidden=\"true\"\n          onClick={() => props.hideReply()}\n          style={{ cursor: \"pointer\" }}\n        ></i>\n      </div>\n      <div className={classes[\"user__info\"]}>\n        <div className={classes[\"user-info__left\"]}>\n          <img src={props.picture} alt=\"Profile\" />\n        </div>\n        <div className={classes[\"user-info__right\"]}>\n          <div className={classes[\"user__names\"]}>\n            <p id={classes[\"fullname\"]}>\n              {`${props.firstname} ${props.lastname}`}\n            </p>\n            <p id={classes[\"username\"]}>{props.username}</p>\n            <p>·</p>\n            <p id={classes[\"time-created\"]}>{props.timeCreated}</p>\n          </div>\n          <div className={classes[\"tweet-content\"]}>{props.content}</div>\n        </div>\n      </div>\n      <form\n        id=\"add-reply\"\n        className={classes[\"add-reply__form\"]}\n        onSubmit={formSubmitHandler}\n      >\n        <div className={classes[\"add-reply__upper\"]}>\n          {!!userData ? (\n            <img\n              className={classes[\"add-reply__image\"]}\n              src={userData.picture}\n              alt=\"Default profile\"\n            />\n          ) : (\n            <img\n              className={classes[\"add-reply__image\"]}\n              src={Profile}\n              alt=\"Default profile\"\n            />\n          )}\n          <textarea\n            className={classes[\"add-reply__input\"]}\n            placeholder=\"Tweet your reply\"\n            ref={replyContent}\n            name=\"reply\"\n          />\n        </div>\n        <div className={classes[\"add-reply__lower\"]}>\n          <div className={classes[\"btn-container\"]}>\n            <button className=\"btn\" type=\"submit\">\n              Reply\n            </button>\n          </div>\n        </div>\n      </form>\n    </div>\n  );\n};\n\nexport default AddReply;\n","import React, { useCallback, useEffect, useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport axiosInstance from \"../axiosInstance\";\n\nconst SaveTweet = (props) => {\n  const navigate = useNavigate();\n  const isLoggedIn = !!localStorage.getItem(\"authTokens\");\n  const [isSaved, setIsSaved] = useState(null);\n  const [hasStarted, setHasStarted] = useState(false);\n  const [hasFinished, setHasFinished] = useState(false);\n  const [forceRefresh, setForceRefresh] = useState(null);\n\n  const checkForSave = useCallback(async () => {\n    try {\n      const response = await axiosInstance.get(`bookmarks/${props.tweetId}/check`)\n      if (response.status === 200) setIsSaved(true)\n    } catch(err) {\n      console.clear()\n      if (err.response.status === 404)\n      setIsSaved(false)\n    }\n  }, [props.tweetId]);\n\n  useEffect(() => {\n    if (isLoggedIn) {\n      setHasStarted(true);\n      checkForSave();\n      setHasFinished(true);\n    } else {\n      setHasStarted(true);\n      setHasFinished(true);\n    }\n  }, [forceRefresh, checkForSave, isLoggedIn]);\n\n  const saveTweetHandler = async (e) => {\n    e.stopPropagation();\n    if (!isLoggedIn) {\n      navigate(\"/login\");\n    }\n    const response = await axiosInstance.post(`tweets/${props.tweetId}/create-bookmark`);\n\n    if (response.status === 201) setForceRefresh(Date.now());\n  };\n\n  const removeFromSavedHandler = async (e) => {\n    e.stopPropagation();\n    const response = await axiosInstance.delete(`bookmarks/${props.tweetId}/delete`);\n\n    if (response.status === 204) {\n      setForceRefresh(Date.now()); // refresh the save component\n      if (props.isBookmarkPage) props.setNeedRefreshTweetList(Date.now()); // refresh the tweetlist component when a use deletes a saved tweet object if we are in book marks page\n    }\n  };\n\n  if (isSaved && hasStarted && hasFinished) {\n    return (\n      <i\n        className=\"fas fa-save fa-lg\"\n        aria-hidden=\"true\"\n        onClick={removeFromSavedHandler}\n      ></i>\n    ); // saved before\n  } else if (!isSaved && hasStarted && hasFinished) {\n    return (\n      <i\n        className=\"far fa-save fa-lg\"\n        aria-hidden=\"true\"\n        onClick={saveTweetHandler}\n      ></i>\n    ); // not saved before\n  }\n};\n\nexport default SaveTweet;\n","import React from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport axiosInstance from \"../axiosInstance\";\n\nconst UnlikeButton = (props) => {\n  const navigate = useNavigate()  \n  const isLoggedIn = !!localStorage.getItem(\"authTokens\");\n\n  const likeHandler = async (e) => {\n    e.stopPropagation()\n    if (!isLoggedIn) {\n      navigate(\"/login\");\n    } else {\n      const response = await axiosInstance.delete(`remove-like/${props.likeId}`);\n      if (response.status === 204) {\n        props.setFakeLikeNumber(prevNum => prevNum -1)\n        props.setLikeClicked(false)\n      }\n    }\n  };\n  return (\n    <div>\n      <i className=\"fa fa-heart\" style={{color: 'red'}} onClick={likeHandler} />\n      <p>{props.likes}</p>\n    </div>\n  );\n};\n\nexport default UnlikeButton;\n","import { useEffect, useState, useRef } from \"react\";\nimport { useNavigate, Link } from \"react-router-dom\";\n\nimport classes from \"./TweetStyle.module.css\";\nimport LikeButton from \"../LikeButton\";\nimport UnlikeButton from \"../UnlikeButton\";\nimport SaveTweet from \"../SaveTweet\";\nimport ErrorMessage from \"../Modal/ErrorMessage\";\nimport axiosInstance from \"../../axiosInstance\";\n\nconst TweetDetail = (props) => {\n  const userLink = `/${props.username}`;\n  const navigate = useNavigate();\n  const [isLoading, setIsLoading] = useState(false);\n  const [hasStarted, setHasStarted] = useState(false);\n  const [likeOrDislike, setLikeOrDislike] = useState(null);\n  const [likeClicked, setLikeClicked] = useState(null);\n  const [fakeLikeNumber, setFakeLikeNumber] = useState(props.likes); // This is a fake number, when a user adds a like to a post, it is going to be in db, but instead of refreshing the data from db, i set this fake number for number of likes, which is the same as the real one.\n  const isLoggedIn = !!localStorage.getItem(\"authTokens\");\n  const replyContent = useRef(\"\");\n  const [hasError, setHasError] = useState(false);\n  const [errorMessage, setErrorMessage] = useState(null);\n\n  const checkForLikeButton = async () => {\n    setHasStarted(true);\n    setIsLoading(true);\n    if (isLoggedIn) {\n      await axiosInstance\n        .get(`like/${props.tweetId}/check`)\n        .then((res) => {\n          if (res.status === 200) {\n            setLikeOrDislike(\n              <UnlikeButton\n                likeId={res.data.id}\n                likes={fakeLikeNumber}\n                setFakeLikeNumber={setFakeLikeNumber}\n                setLikeClicked={setLikeClicked}\n              />\n            );\n          }\n        })\n        .catch((err) => {\n          setLikeOrDislike(\n            <LikeButton\n              tweetId={props.tweetId}\n              likes={fakeLikeNumber}\n              setFakeLikeNumber={setFakeLikeNumber}\n              setLikeClicked={setLikeClicked}\n            />\n          );\n        });\n    }\n    setIsLoading(false);\n  };\n\n  useEffect(() => {\n    checkForLikeButton();\n  }, [likeClicked]);\n\n  let likeButton;\n  if (isLoggedIn) {\n    likeButton = <div>{!isLoading && hasStarted && likeOrDislike}</div>;\n  } else {\n    likeButton = (\n      <div>\n        <i className=\"fa fa-heart-o\" onClick={() => navigate(\"/login\")} />\n        <p>{props.likes}</p>\n      </div>\n    );\n  }\n\n  const formSubmitHandler = (e) => {\n    e.preventDefault();\n\n    if (isLoggedIn) {\n      if (replyContent.current.value.trim().length > 0) {\n        sendData();\n      }\n    } else {\n      props.onError(\n        <p>\n          Please <Link to=\"/login\">login</Link> before adding a tweet.\n        </p>\n      );\n    }\n  };\n\n  async function sendData() {\n    const response = await axiosInstance.post(`tweets/${props.tweetId}/reply`, {\n      text: replyContent.current.value,\n    });\n\n    if (response.status === 201) {\n      props.setNewReply(response.data.id);\n      replyContent.current.value = \"\";\n      return;\n    }\n  }\n\n  const onClose = () => {\n    setErrorMessage(null);\n    setHasError(false);\n  };\n\n  return (\n    <section className={classes[\"tweet-detail\"]}>\n      {hasError && (\n        <ErrorMessage onClose={onClose} errorMessage={errorMessage} />\n      )}\n      <div className={classes[\"tweet-detail__top\"]}>\n        <div className={classes[\"user-info\"]}>\n          <div className={classes[\"tweet-detail__user-picture\"]}>\n            <img src={props.picture} alt=\"Profile\" />\n          </div>\n          <div className={classes[\"tweet-detail__user-names\"]}>\n            <a id={classes[\"user-name\"]} href={userLink}>\n              {`${props.firstname} ${props.lastname}`}\n            </a>\n            <a id={classes[\"username\"]} href={userLink}>\n              {props.username}\n            </a>\n          </div>\n        </div>\n        {/* <div className={classes[\"tweet-detail__more-btn\"]}>\n          <div></div>\n          <div></div>\n          <div></div>\n        </div> */}\n      </div>\n      <div className={classes[\"tweet-detail__middle\"]}>\n        <p className={classes[\"tweet-detail__content\"]}>{props.content}</p>\n      </div>\n      <div className={classes[\"tweet-detail__bottom\"]}>\n        <div className={classes[\"tweet-detail__btns\"]}>\n          <div\n            title=\"Reply\"\n            className={classes[\"tweet-detail__interactive-btn\"]}\n          >\n            <i className=\"fa fa-reply\" onClick={props.showReply} />\n            <p>{props.reply}</p>\n          </div>\n          <div\n            title=\"Like\"\n            className={classes[\"tweet-detail__interactive-btn\"]}\n          >\n            {likeButton}\n          </div>\n          <div\n            title=\"Save\"\n            className={classes[\"tweet-detail__interactive-btn\"]}\n          >\n            <SaveTweet\n              tweetId={props.tweetId}\n              setHasError={setHasError}\n              setErrorMessage={setErrorMessage}\n            />\n          </div>\n        </div>\n        <div className={classes[\"always-visible__add-reply\"]}>\n          <form onSubmit={formSubmitHandler}>\n            <img src={props.currentUserPfp} alt=\"Profile\" />\n            <textarea placeholder=\"Tweet your reply\" ref={replyContent} />\n            <button className=\"btn\" type=\"submit\">\n              Reply\n            </button>\n          </form>\n        </div>\n      </div>\n    </section>\n  );\n};\n\nexport default TweetDetail;\n","import React from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport classes from \"./Reply.module.css\";\n\nconst Reply = (props) => {\n  const navigate = useNavigate();\n  const navigateToProfileHandler = () => navigate(`/get-profile/${props.username}`);\n\n  return (\n    <div className={classes[\"reply\"]}>\n      <div className={classes[\"reply-left\"]}>\n        <img src={props.profilePicture} alt={props.fullname} />\n      </div>\n      <div className={classes[\"reply-right\"]}>\n        <div className={classes[\"reply__user\"]}>\n          <div className={classes[\"user__names\"]}>\n            <p\n              onClick={navigateToProfileHandler}\n              id={classes.fullname}\n              className={classes[\"link--underline\"]}\n            >\n              {props.fullname}\n            </p>\n            <p\n              onClick={navigateToProfileHandler}\n              className={classes[\"link--underline\"]}\n            >\n              {props.username}\n            </p>\n            <p>· {props.timeCreated}</p>\n          </div>\n        </div>\n        <div className={classes[\"reply-content\"]}>\n          <p>{props.text}</p>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Reply;\n","import axios from \"axios\";\nimport React, { useCallback, useEffect, useState, useContext } from \"react\";\nimport Reply from \"./Reply\";\nimport classes from \"./Reply.module.css\";\nimport dateTimeGenerator from '../../utils'\nimport { ServerContext } from \"../../store/server-context\";\n\nconst ReplyList = (props) => {\n  const [replyList, setReplyList] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [hasStarted, setHasStarted] = useState(false);\n  const [hasError, setHasError] = useState(false);\n  const { serverURL } = useContext(ServerContext)\n\n  const getReplies = useCallback(async () => {\n    setIsLoading(true);\n    setHasStarted(true);\n    await axios\n      .get(`${serverURL}tweets/${props.tweetId}/reply`)\n      .then((res) => {\n        if (res.status === 200) {\n          setReplyList(res.data);\n        } else {\n          setHasError(true);\n        }\n      });\n    setIsLoading(false);\n  }, [props.tweetId]);\n\n  useEffect(() => {\n    getReplies();\n  }, [getReplies, props.newReply]);\n\n  return (\n    <section className={classes[\"reply-list\"]}>\n      {hasError && (\n        <p\n          style={{\n            textAlign: \"center\",\n            color: \"#71767b\",\n            marginTop: \"1.5rem\",\n          }}\n        >\n          Sorry there was an error fetching the replies, Please check your\n          internet connection.\n        </p>\n      )}\n      {!isLoading &&\n        hasStarted &&\n        !hasError &&\n        replyList.map((reply) => (\n          <Reply\n            key={reply.id}\n            text={reply.text}\n            fullname={`${reply.user.firstname} ${reply.user.lastname}`}\n            username={reply.user.username}\n            profilePicture={reply.user.picture}\n            timeCreated={dateTimeGenerator(\n              reply.date_created.created_ago,\n              reply.date_created.created\n            )}\n          />\n        ))}\n      {!hasError && !isLoading && hasStarted && replyList.length === 0 && (\n        <p\n          style={{\n            textAlign: \"center\",\n            color: \"#71767b\",\n            marginTop: \"1.5rem\",\n          }}\n        >\n          No replies yet!\n        </p>\n      )}\n    </section>\n  );\n};\n\nexport default ReplyList;\n","import React, { useCallback, useEffect, useState, useContext } from \"react\";\nimport Searchbar from \"../components/Searchbar\";\nimport ProfilePicture from \"../components/Tweet/default_profile.png\";\nimport axios from \"axios\";\nimport { useParams } from \"react-router-dom\";\nimport TweetDetail from \"../components/Tweet/TweetDetail\";\nimport dateTimeGenerator from \"../utils\";\nimport AddReply from \"../components/Reply/AddReply\";\nimport ErrorMessage from \"../components/Modal/ErrorMessage\";\nimport Overlay from \"../components/Modal/Overlay\";\nimport ReplyList from \"../components/Reply/ReplyList\";\nimport { AuthContext } from \"../store/auth-context\";\nimport { ServerContext } from \"../store/server-context\";\n\nconst TweetDetailPage = (props) => {\n  const [tweetDetail, setTweetDetail] = useState(null);\n  const { tweetId } = useParams();\n  const { userData } = useContext(AuthContext)\n  const [hasError, setHasError] = useState(false);\n  const [errorMessage, setErrorMessage] = useState(null);\n  const [isReplyVisible, setIsReplyVisible] = useState(false);\n  const [newReply, setNewReply] = useState(null);\n  const [startedLoading, setStartedLoading] = useState(false);\n  const [finishedLoading, setFinishedLoading] = useState(false);\n  const { serverURL } = useContext(ServerContext)\n\n  const getTweets = useCallback(async () => {\n    const response = await axios.get(\n      `${serverURL}tweets/${tweetId}`\n    );\n\n    if (response.status === 200) setTweetDetail(response.data);\n  }, [tweetId, serverURL]);\n\n  useEffect(() => {\n      setStartedLoading(true);\n      getTweets();\n      setFinishedLoading(true);\n      setStartedLoading(true);\n      getTweets();\n      setFinishedLoading(true);\n  }, [getTweets, hasError]);\n\n  const showErrorMessageHandler = (message) => {\n    setErrorMessage(message);\n    setHasError(true);\n  };\n\n  const errorMessageCloseHandler = () => {\n    setErrorMessage(null);\n    setHasError(false);\n  };\n\n  const showReply = () => {\n    setIsReplyVisible(true);\n    document.getElementById(\"add-reply__container\").classList.remove(\"hidden\");\n  };\n\n  const hideReply = () => {\n    setIsReplyVisible(false);\n    document.getElementById(\"add-reply__container\").classList.add(\"hidden\");\n  };\n\n  const onOverlayClick = () => {\n    props.onMenuClick()\n    setHasError(false)\n  }\n\n  return (\n    <React.Fragment>\n      <Overlay onOverlayClick={onOverlayClick} isVisible={!!props.isMenuOpen} />\n      <Overlay onOverlayClick={hideReply} isVisible={isReplyVisible} />\n      <Overlay onOverlayClick={errorMessageCloseHandler} isVisible={hasError} />\n      {hasError && (\n        <ErrorMessage\n          errorMessage={errorMessage}\n          onClose={errorMessageCloseHandler}\n        />\n      )}\n      <div className=\"main__middle-side\" id=\"homepage-middle\">\n        <section className=\"menu-btn__section\">\n          <div className=\"ham-menu__btn\" onClick={props.onMenuClick}>\n            <div></div>\n            <div></div>\n            <div></div>\n          </div>\n        </section>\n        {finishedLoading && startedLoading && tweetDetail ? (\n          <TweetDetail\n            tweetId={tweetId}\n            picture={tweetDetail.user.picture}\n            content={tweetDetail.content}\n            username={tweetDetail.user.username}\n            firstname={tweetDetail.user.firstname}\n            lastname={tweetDetail.user.lastname}\n            likes={tweetDetail.likes.length}\n            timeCreated={dateTimeGenerator(\n              tweetDetail.date_created.created_ago,\n              tweetDetail.date_created.created\n            )}\n            showReply={showReply}\n            setNewReply={setNewReply}\n            currentUserPfp={!!userData ? userData.picture : ProfilePicture}\n            onError = {showErrorMessageHandler}\n          />\n        ) : (\n          <p className=\"p-info--center\">This tweet doesn't exist.</p>\n        )}\n        {tweetDetail && (\n          <div\n            id=\"add-reply__container\"\n            className=\"add-reply__container hidden\"\n          >\n            <AddReply\n              onError={showErrorMessageHandler}\n              tweetId={tweetId}\n              username={tweetDetail.user.username}\n              firstname={tweetDetail.user.firstname}\n              lastname={tweetDetail.user.lastname}\n              timeCreated={dateTimeGenerator(\n                tweetDetail.date_created.created_ago,\n                tweetDetail.date_created.created\n              )}\n              picture={tweetDetail.user.picture}\n              content={tweetDetail.content}\n              hideReply={hideReply}\n              setNewReply={setNewReply}\n            />\n          </div>\n        )}\n        <ReplyList newReply={newReply} tweetId={tweetId} />\n      </div>\n      <div className=\"main__right-side\">\n        <Searchbar />\n      </div>\n    </React.Fragment>\n  );\n};\n\nexport default TweetDetailPage;\n","// extracted by mini-css-extract-plugin\nexport default {\"reply-section\":\"Reply_reply-section__BbnCc\",\"user__info\":\"Reply_user__info__UitVu\",\"user-info__left\":\"Reply_user-info__left__qR7yp\",\"user-info__right\":\"Reply_user-info__right__M3A23\",\"user__names\":\"Reply_user__names__6lVy1\",\"link--underline\":\"Reply_link--underline__IUIu6\",\"fullname\":\"Reply_fullname__lqRK6\",\"tweet-content\":\"Reply_tweet-content__GAg4T\",\"add-reply__form\":\"Reply_add-reply__form__Y1WR7\",\"add-reply__upper\":\"Reply_add-reply__upper__+Dp6b\",\"add-reply__lower\":\"Reply_add-reply__lower__yX4-S\",\"add-reply__image\":\"Reply_add-reply__image__MXGYn\",\"add-reply__input\":\"Reply_add-reply__input__kTyOX\",\"btn-container\":\"Reply_btn-container__+aEwk\",\"hidden\":\"Reply_hidden__Z2HP2\",\"reply-list\":\"Reply_reply-list__8iYMy\",\"reply\":\"Reply_reply__4J+VP\",\"reply-left\":\"Reply_reply-left__UpdBH\",\"reply-right\":\"Reply_reply-right__V+8vO\"};"],"names":["props","navigate","useNavigate","isLoggedIn","localStorage","getItem","likeHandler","e","stopPropagation","axiosInstance","tweetId","status","setFakeLikeNumber","prevNum","setLikeClicked","className","onClick","likes","ErrorMessage","errorMessage","onClose","document","getElementById","replyContent","useRef","userData","useContext","AuthContext","text","current","value","response","setNewReply","data","id","classes","hideReply","style","cursor","src","picture","alt","firstname","lastname","username","timeCreated","content","onSubmit","preventDefault","trim","length","sendData","onError","to","Profile","placeholder","ref","name","type","useState","isSaved","setIsSaved","hasStarted","setHasStarted","hasFinished","setHasFinished","forceRefresh","setForceRefresh","checkForSave","useCallback","console","clear","useEffect","saveTweetHandler","Date","now","removeFromSavedHandler","isBookmarkPage","setNeedRefreshTweetList","likeId","color","likeButton","userLink","isLoading","setIsLoading","likeOrDislike","setLikeOrDislike","likeClicked","fakeLikeNumber","hasError","setHasError","setErrorMessage","checkForLikeButton","then","res","UnlikeButton","catch","err","LikeButton","href","title","showReply","reply","SaveTweet","currentUserPfp","navigateToProfileHandler","profilePicture","fullname","replyList","setReplyList","serverURL","ServerContext","getReplies","axios","newReply","textAlign","marginTop","map","user","dateTimeGenerator","date_created","created_ago","created","tweetDetail","setTweetDetail","useParams","isReplyVisible","setIsReplyVisible","startedLoading","setStartedLoading","finishedLoading","setFinishedLoading","getTweets","showErrorMessageHandler","message","errorMessageCloseHandler","classList","add","Overlay","onOverlayClick","onMenuClick","isVisible","isMenuOpen","remove","ProfilePicture","AddReply","Searchbar"],"sourceRoot":""}