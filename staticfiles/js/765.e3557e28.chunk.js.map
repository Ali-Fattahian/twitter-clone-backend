{"version":3,"file":"static/js/765.e3557e28.chunk.js","mappings":"iLA4BA,IAxBmB,SAACA,GAClB,IAAMC,GAAWC,EAAAA,EAAAA,MACXC,IAAeC,aAAaC,QAAQ,cAEpCC,EAAW,mCAAG,WAAOC,GAAP,oEAClBA,EAAEC,kBACGL,EAFa,gBAGhBF,EAAS,UAHO,sCAKOQ,EAAAA,EAAAA,KAAA,qBAAiCT,EAAMU,UAL9C,OAMQ,MANR,OAMHC,SACXX,EAAMY,mBAAkB,SAAAC,GAAO,OAAIA,EAAS,KAC5Cb,EAAMc,gBAAe,IARP,2CAAH,sDAYjB,OACE,4BACE,cAAGC,UAAU,gBAAgBC,QAASV,KACtC,uBAAIN,EAAMiB,a,0CCrBVC,EAAe,SAAClB,GACpB,OACE,gBAAKe,UAAU,2BAAf,UACE,iBAAKA,UAAU,uBAAf,UACGf,EAAMmB,cACP,0BACE,mBAAQJ,UAAU,MAAMC,QAAShB,EAAMoB,QAAvC,2BAS0BC,SAASC,eAAe,QAE5D,O,wHCoFA,IAhGiB,SAACtB,GAChB,IAAMuB,GAAeC,EAAAA,EAAAA,QAAO,IACpBC,GAAaC,EAAAA,EAAAA,YAAWC,EAAAA,GAAxBF,SAFkB,wCAoB1B,oGACyBhB,EAAAA,EAAAA,KAAA,iBAA6BT,EAAMU,QAAnC,UAAoD,CACzEkB,KAAML,EAAaM,QAAQC,QAF/B,UAK0B,OAJlBC,EADR,QAKepB,OALf,uBAMIX,EAAMgC,YAAYD,EAASE,KAAKC,IAChCX,EAAaM,QAAQC,MAAQ,GAPjC,+DApB0B,sBAgC1B,OACE,iBAAKf,UAAWoB,EAAAA,EAAAA,iBAAhB,WACE,gBAAKpB,UAAWoB,EAAAA,EAAAA,wBAAhB,UACE,cACEpB,UAAU,cACV,cAAY,OACZC,QAAS,kBAAMhB,EAAMoC,aACrBC,MAAO,CAAEC,OAAQ,gBAGrB,iBAAKvB,UAAWoB,EAAAA,EAAAA,WAAhB,WACE,gBAAKpB,UAAWoB,EAAAA,EAAAA,mBAAhB,UACE,gBAAKI,IAAKvC,EAAMwC,QAASC,IAAI,eAE/B,iBAAK1B,UAAWoB,EAAAA,EAAAA,oBAAhB,WACE,iBAAKpB,UAAWoB,EAAAA,EAAAA,YAAhB,WACE,cAAGD,GAAIC,EAAAA,EAAAA,SAAP,mBACMnC,EAAM0C,UADZ,YACyB1C,EAAM2C,aAE/B,cAAGT,GAAIC,EAAAA,EAAAA,SAAP,SAA6BnC,EAAM4C,YACnC,iCACA,cAAGV,GAAIC,EAAAA,EAAAA,gBAAP,SAAiCnC,EAAM6C,kBAEzC,gBAAK9B,UAAWoB,EAAAA,EAAAA,iBAAhB,SAA2CnC,EAAM8C,iBAGrD,kBACEZ,GAAG,YACHnB,UAAWoB,EAAAA,EAAAA,mBACXY,SAzDoB,SAACxC,GACzBA,EAAEyC,iBAEIvB,EACAF,EAAaM,QAAQC,MAAMmB,OAAOC,OAAS,GARzB,mCASpBC,GAGFnD,EAAMoD,SACJ,oCACS,SAAC,KAAD,CAAMC,GAAG,SAAT,mBADT,+BA6CF,WAKE,iBAAKtC,UAAWoB,EAAAA,EAAAA,oBAAhB,UACKV,GACD,gBACEV,UAAWoB,EAAAA,EAAAA,oBACXI,IAAKd,EAASe,QACdC,IAAI,qBAGN,gBACE1B,UAAWoB,EAAAA,EAAAA,oBACXI,IAAKe,EACLb,IAAI,qBAGR,qBACE1B,UAAWoB,EAAAA,EAAAA,oBACXoB,YAAY,mBACZC,IAAKjC,EACLkC,KAAK,cAGT,gBAAK1C,UAAWoB,EAAAA,EAAAA,oBAAhB,UACE,gBAAKpB,UAAWoB,EAAAA,EAAAA,iBAAhB,UACE,mBAAQpB,UAAU,MAAM2C,KAAK,SAA7B,+B,sGCpBZ,IArEkB,SAAC1D,GACjB,IAAMC,GAAWC,EAAAA,EAAAA,MACXC,IAAeC,aAAaC,QAAQ,cAC1C,GAA8BsD,EAAAA,EAAAA,UAAS,MAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACA,GAAoCF,EAAAA,EAAAA,WAAS,GAA7C,eAAOG,EAAP,KAAmBC,EAAnB,KACA,GAAsCJ,EAAAA,EAAAA,WAAS,GAA/C,eAAOK,EAAP,KAAoBC,EAApB,KACA,GAAwCN,EAAAA,EAAAA,UAAS,MAAjD,eAAOO,EAAP,KAAqBC,EAArB,KAEMC,GAAeC,EAAAA,EAAAA,cAAW,iBAAC,uGAEN5D,EAAAA,EAAAA,IAAA,oBAA+BT,EAAMU,QAArC,WAFM,OAGL,MAHK,OAGhBC,QAAgBkD,GAAW,GAHX,gDAK7BS,QAAQC,QACoB,MAAxB,KAAIxC,SAASpB,QACjBkD,GAAW,GAPkB,yDAS9B,CAAC7D,EAAMU,WAEV8D,EAAAA,EAAAA,YAAU,WACJrE,GACF4D,GAAc,GACdK,IACAH,GAAe,KAEfF,GAAc,GACdE,GAAe,MAEhB,CAACC,EAAcE,EAAcjE,IAEhC,IAAMsE,EAAgB,mCAAG,WAAOlE,GAAP,wEACvBA,EAAEC,kBACGL,GACHF,EAAS,UAHY,SAKAQ,EAAAA,EAAAA,KAAA,iBAA6BT,EAAMU,QAAnC,qBALA,OAOC,MAPD,OAOVC,QAAgBwD,EAAgBO,KAAKC,OAP3B,2CAAH,sDAUhBC,EAAsB,mCAAG,WAAOrE,GAAP,wEAC7BA,EAAEC,kBAD2B,SAENC,EAAAA,EAAAA,OAAA,oBAAkCT,EAAMU,QAAxC,YAFM,OAIL,MAJK,OAIhBC,SACXwD,EAAgBO,KAAKC,OACjB3E,EAAM6E,gBAAgB7E,EAAM8E,wBAAwBJ,KAAKC,QANlC,2CAAH,sDAU5B,OAAIf,GAAWE,GAAcE,GAEzB,cACEjD,UAAU,oBACV,cAAY,OACZC,QAAS4D,KAGHhB,GAAWE,GAAcE,GAEjC,cACEjD,UAAU,oBACV,cAAY,OACZC,QAASyD,SALR,I,2MC4HT,EA/Kc,SAACzE,GACb,IAwEI+E,EAxEEC,EAAQ,wBAAoBhF,EAAM4C,UAClC3C,GAAWC,EAAAA,EAAAA,MACjB,GAAkCyD,EAAAA,EAAAA,WAAS,GAA3C,eAAOsB,EAAP,KAAkBC,EAAlB,KACA,GAAoCvB,EAAAA,EAAAA,WAAS,GAA7C,eAAOG,EAAP,KAAmBC,EAAnB,KACA,GAA0CJ,EAAAA,EAAAA,UAAS,MAAnD,eAAOwB,EAAP,KAAsBC,EAAtB,KACA,GAAsCzB,EAAAA,EAAAA,UAAS,MAA/C,eAAO0B,EAAP,KAAoBvE,EAApB,KACA,GAA4C6C,EAAAA,EAAAA,UAAS3D,EAAMiB,OAA3D,eAAOqE,EAAP,KAAuB1E,EAAvB,KACMT,IAAeC,aAAaC,QAAQ,cAC1C,GAAkDsD,EAAAA,EAAAA,WAAS,GAA3D,eAAO4B,EAAP,KAA0BC,EAA1B,KACA,GAAgC7B,EAAAA,EAAAA,WAAS,GAAzC,eAAO8B,EAAP,KAAiBC,EAAjB,KACA,GAAwC/B,EAAAA,EAAAA,UAAS,MAAjD,eAAOxC,EAAP,KAAqBwE,EAArB,KACA,GAAwBhC,EAAAA,EAAAA,UAAS,MAAxB3B,GAAT,eAOMI,EAAY,WAChBoD,GAAqB,GACrBnE,SAASC,eAAe,wBAAwBsE,UAAUC,IAAI,WAa1DC,GAAkB,mCAAG,iFACzB/B,GAAc,GACdmB,GAAa,IACT/E,EAHqB,gCAIjBM,EAAAA,EAAAA,IAAA,eACST,EAAMU,QADf,WAEHqF,MAAK,SAACC,GACL,GAAmB,MAAfA,EAAIrF,OAUN,MAAMqF,EAAIrF,OATVyE,GACE,SAACa,EAAA,EAAD,CACEC,OAAQF,EAAI/D,KAAKC,GACjBjB,MAAOqE,EACP1E,kBAAmBA,EACnBE,eAAgBA,QAOvBqF,OAAM,WACL7B,QAAQC,QACRa,GACE,SAACgB,EAAA,EAAD,CACE1F,QAASV,EAAMU,QACfO,MAAOqE,EACP1E,kBAAmBA,EACnBE,eAAgBA,QA3BD,OAgCzBoE,GAAa,GAhCY,2CAAH,sDAmCxBV,EAAAA,EAAAA,YAAU,WACRsB,OACC,CAACT,IAIFN,EADE5E,GAEA,gBAAKkG,MAAM,OAAX,UAAoBpB,GAAanB,GAAcqB,KAI/C,iBAAKkB,MAAM,OAAX,WACE,cAAGtF,UAAU,gBAAgBC,QAAS,kBAAMf,EAAS,cACrD,uBAAID,EAAMiB,WAShB,OACE,UAAC,WAAD,WACGwE,IACC,SAACvE,EAAA,EAAD,CACEC,aAAcA,EACdC,QAnEyB,WAC/BuE,EAAgB,MAChBD,GAAY,OAoEV,SAACY,EAAA,EAAD,CACEC,UAAWhB,EACXiB,eAAgB,kBAAMpE,QAExB,oBACEF,GAAG,uBACHnB,UAAU,8BAFZ,UAIE,SAAC0F,EAAA,EAAD,CACErD,QApFwB,SAACsD,GAC/Bf,EAAgBe,GAChBhB,GAAY,IAmFNhF,QAASV,EAAMU,QACfkC,SAAU5C,EAAM2G,KAChBjE,UAAW1C,EAAM0C,UACjBC,SAAU3C,EAAM2C,SAChBE,YAAa7C,EAAM6C,YACnBL,QAASxC,EAAMwC,QACfM,QAAS9C,EAAM8C,QACfV,UAAWA,EACXJ,YAAaA,OAGjB,iBAAKjB,UAAWoB,EAAAA,EAAAA,MAAenB,QAjCA,WACjCf,EAAS,WAAD,OAAYD,EAAMU,WAgCxB,WACE,gBAAKK,UAAWoB,EAAAA,EAAAA,cAAhB,UACE,gBAAKI,IAAKvC,EAAMwC,QAASC,IAAI,UAAUJ,MAAO,CAACuE,UAAW,cAE5D,iBAAK7F,UAAWoB,EAAAA,EAAAA,eAAhB,WACE,gBAAKpB,UAAWoB,EAAAA,EAAAA,oBAAhB,UACE,iBAAKpB,UAAWoB,EAAAA,EAAAA,aAAhB,WACE,eAAGD,GAAIC,EAAAA,EAAAA,aAAsB0E,KAAM7B,EAAnC,UACGhF,EAAM0C,UADT,IACqB1C,EAAM2C,aAE3B,cAAGT,GAAIC,EAAAA,EAAAA,SAAqB0E,KAAM7B,EAAlC,SACGhF,EAAM4C,YAET,cAAGV,GAAIC,EAAAA,EAAAA,aAAsB0E,KAAM7B,EAAnC,mBAGA,cAAG9C,GAAIC,EAAAA,EAAAA,uBAAgC0E,KAAM7B,EAA7C,SACGhF,EAAM6C,oBASb,gBAAK9B,UAAWoB,EAAAA,EAAAA,iBAAhB,SAA2CnC,EAAM8C,WACjD,iBAAK/B,UAAWoB,EAAAA,EAAAA,uBAAhB,WACE,iBACEkE,MAAM,QACNrF,QAAS,SAACT,GACRA,EAAEC,kBAxIdgF,GAAqB,GACrBnE,SAASC,eAAe,wBAAwBsE,UAAUkB,OAAO,WAoIzD,WAOE,cAAG/F,UAAU,iBACb,uBAAIf,EAAM+G,WAEXhC,GACD,gBAAKsB,MAAM,OAAX,UACE,SAACW,EAAA,EAAD,CACEtG,QAASV,EAAMU,QACfgF,YAAaA,EACbC,gBAAiBA,EACjBb,wBAAyB9E,EAAMiH,eAC/BpC,eAAgB7E,EAAM6E,gC,UC3ItC,EAjCkB,SAAC7E,GACjB,OAAKA,EAAMkH,WAOT,oBAAShF,GAAG,aAAanB,UAAWoB,EAAAA,EAAAA,cAApC,SAC4B,IAAzBnC,EAAMkH,UAAUhE,OAAalD,EAAMkH,UAAUC,KAAI,SAACC,GAAD,OAChD,SAAC,EAAD,CACE1G,QAAS0G,EAAMlF,GAEfQ,UAAW0E,EAAMT,KAAKjE,UACtBC,SAAUyE,EAAMT,KAAKhE,SACrBC,SAAUwE,EAAMT,KAAK/D,SACrBJ,QAAS4E,EAAMT,KAAKnE,QACpBK,aAAawE,EAAAA,EAAAA,GACXD,EAAME,aAAaC,YACnBH,EAAME,aAAaE,SAErB1E,QAASsE,EAAMtE,QACfiE,MAAOK,EAAMK,WACbC,QAASN,EAAMO,cACf1G,MAAOmG,EAAMnG,MAAMiC,OACnB2B,eAAgB7E,EAAM6E,eACtBoC,eAAgBjH,EAAMiH,gBAdjBG,EAAMlF,QAgBV,cAAGnB,UAAU,iBAAb,8BAzBL,oBAASA,UAAWoB,EAAAA,EAAAA,YAApB,UACE,0F,6FCoBR,IAxBqB,SAACnC,GACpB,IAAMC,GAAWC,EAAAA,EAAAA,MACXC,IAAeC,aAAaC,QAAQ,cAEpCC,EAAW,mCAAG,WAAOC,GAAP,oEAClBA,EAAEC,kBACGL,EAFa,gBAGhBF,EAAS,UAHO,sCAKOQ,EAAAA,EAAAA,OAAA,sBAAoCT,EAAMkG,SALjD,OAMQ,MANR,OAMHvF,SACXX,EAAMY,mBAAkB,SAAAC,GAAO,OAAIA,EAAS,KAC5Cb,EAAMc,gBAAe,IARP,2CAAH,sDAYjB,OACE,4BACE,cAAGC,UAAU,cAAcsB,MAAO,CAACuF,MAAO,OAAQ5G,QAASV,KAC3D,uBAAIN,EAAMiB,a,oMCqDhB,EApEiB,SAACjB,GAChB,IAAM6H,GAAerG,EAAAA,EAAAA,QAAO,IACtBrB,IAAeC,aAAaC,QAAQ,cAClCoB,GAAaC,EAAAA,EAAAA,YAAWC,EAAAA,GAAxBF,SACAqG,GAAcpG,EAAAA,EAAAA,YAAWqG,EAAAA,GAAzBD,UACR,GAA0CnE,EAAAA,EAAAA,UAAS,MAAnD,eAAOqE,EAAP,KAAsBC,EAAtB,MAEAzD,EAAAA,EAAAA,YAAU,cAAU,CAACwD,IAPK,wCA2B1B,8FACyBvH,EAAAA,EAAAA,KAAA,UAAsBqH,EAAtB,iBAAgD,CACrEhF,QAAS+E,EAAahG,QAAQC,QAFlC,UAK0B,MAL1B,OAKenB,OALf,uBAMIkH,EAAahG,QAAQC,MAAQ,GANjC,+DA3B0B,sBAsC1B,OACE,kBACEI,GAAG,YACHnB,UAAWoB,EAAAA,EAAAA,mBACXY,SAjCsB,SAACxC,GACzBA,EAAEyC,iBAEE7C,EACE0H,EAAahG,QAAQC,MAAMmB,OAAOC,OAAS,GAbzB,mCAcpBC,IAGFnD,EAAMkI,qBAAoB,GAC1BlI,EAAMoD,SACJ,oCACS,SAAC,KAAD,CAAMC,GAAG,SAAT,mBADT,8BAIF4E,EAAiBvD,KAAKC,SAgBxB,WAKE,iBAAK5D,UAAWoB,EAAAA,EAAAA,oBAAhB,WACI,gBACEpB,UAAWoB,EAAAA,EAAAA,oBACXI,IAAKpC,GAAgBsB,EAAWA,EAASe,QAAU2F,EACnD1F,IAAI,eACJJ,MAAO,CAAEuE,UAAW,YAExB,qBACE7F,UAAWoB,EAAAA,EAAAA,oBACXoB,YAAY,oBACZC,IAAKqE,QAGT,gBAAK9G,UAAWoB,EAAAA,EAAAA,oBAAhB,UACE,gBAAKpB,UAAWoB,EAAAA,EAAAA,iBAAhB,UACE,mBAAQpB,UAAU,MAAM2C,KAAK,SAA7B,2B,gDC0BV,EAlFiB,SAAC1D,GAChB,OAAkC2D,EAAAA,EAAAA,UAAS,IAA3C,eAAOuD,EAAP,KAAkBkB,EAAlB,KACA,GAAgCzE,EAAAA,EAAAA,WAAS,GAAzC,eAAO8B,EAAP,KAAiBC,EAAjB,KACA,GAAwC/B,EAAAA,EAAAA,UAAS,MAAjD,eAAOxC,EAAP,KAAqBwE,EAArB,KACQmC,GAAcpG,EAAAA,EAAAA,YAAWqG,EAAAA,GAAzBD,UACArG,GAAaC,EAAAA,EAAAA,YAAWC,EAAAA,GAAxBF,SACR,GAAgDkC,EAAAA,EAAAA,WAAS,GAAzD,eAAO0E,EAAP,KAAyBH,EAAzB,KAEMI,EAAS,mCAAG,oGACOC,IAAAA,IAAA,UAAaT,EAAb,SADP,OAGQ,OAFlB/F,EADU,QAGHpB,QAAgByH,EAAarG,EAASE,MAHnC,2CAAH,sDAMfuC,EAAAA,EAAAA,YAAU,WACR8D,MACC,IAoBH,OACE,UAAC,WAAD,YACE,SAAChC,EAAA,EAAD,CAASE,eATU,WACrB0B,GAAoB,GACpBxC,GAAY,GACZC,GAAgB,GAChB3F,EAAMwI,eAAc,IAKuBjC,UAAW8B,IACnD5C,IACC,SAACvE,EAAA,EAAD,CACEC,aAAcA,EACdC,QAnByB,WAC/BuE,EAAgB,MAChBD,GAAY,GACZwC,GAAoB,OAmBlB,iBAAKnH,UAAU,oBAAoBmB,GAAG,kBAAtC,WACE,qBAASnB,UAAU,oBAAnB,WACE,gBACEwB,IAAOd,EAAWA,EAASe,QAAU2F,EACrC1F,IAAI,UACJzB,QAAS,WACPkH,GAAoB,GACpBlI,EAAMyI,eAERpG,MAAO,CAAEuE,UAAW,YAEtB,iBACE7F,UAAU,gBACVC,QAAS,WACPkH,GAAoB,GACpBlI,EAAMyI,eAJV,WAOE,oBACA,oBACA,uBAEF,uBAAIzI,EAAM0I,eAEZ,SAAC,EAAD,CACEtF,QApDwB,SAACsD,GAC/Bf,EAAgBe,GAChBhB,GAAY,IAmDNwC,oBAAqBA,KAEvB,SAACS,EAAA,EAAD,CAAWzB,UAAWA,EAAWrC,gBAAgB,QAEnD,gBAAK9D,UAAU,mBAAf,UACE,SAAC6H,EAAA,EAAD,W,iBCtFR,KAAgB,gBAAgB,6BAA6B,WAAa,0BAA0B,kBAAkB,+BAA+B,mBAAmB,gCAAgC,YAAc,2BAA2B,kBAAkB,+BAA+B,SAAW,wBAAwB,gBAAgB,6BAA6B,kBAAkB,+BAA+B,mBAAmB,gCAAgC,mBAAmB,gCAAgC,mBAAmB,gCAAgC,mBAAmB,gCAAgC,gBAAgB,6BAA6B,OAAS,sBAAsB,aAAa,0BAA0B,MAAQ,qBAAqB,aAAa,0BAA0B,cAAc","sources":["components/LikeButton.js","components/Modal/ErrorMessage.js","components/Reply/AddReply.js","components/SaveTweet.js","components/Tweet/Tweet.js","components/Tweet/TweetList.js","components/UnlikeButton.js","components/Tweet/AddTweet.js","pages/HomePage.js","webpack://frontend/./src/components/Reply/Reply.module.css?fbc2"],"sourcesContent":["import React from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport axiosInstance from \"../axiosInstance\";\n\nconst LikeButton = (props) => {\n  const navigate = useNavigate()  \n  const isLoggedIn = !!localStorage.getItem(\"authTokens\");\n\n  const likeHandler = async (e) => {\n    e.stopPropagation()\n    if (!isLoggedIn) {\n      navigate(\"/login\");\n    } else {\n      const response = await axiosInstance.post(`like-tweet/${props.tweetId}`);\n      if (response.status === 201) {\n        props.setFakeLikeNumber(prevNum => prevNum +1)\n        props.setLikeClicked(true)\n      }\n    }\n  };\n  return (\n    <div>\n      <i className=\"fa fa-heart-o\" onClick={likeHandler} />\n      <p>{props.likes}</p>\n    </div>\n  );\n};\n\nexport default LikeButton;\n","import * as ReactDOM from \"react-dom\";\n\nconst ErrorMessage = (props) => {\n  return (\n    <div className=\"error_message__container\">\n      <div className=\"error-message__modal\">\n        {props.errorMessage}\n        <div>\n          <button className=\"btn\" onClick={props.onClose}>\n            Close\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nReactDOM.createPortal(ErrorMessage, document.getElementById(\"root\"));\n\nexport default ErrorMessage;\n","import React, { useContext, useRef } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport classes from \"./Reply.module.css\";\nimport Profile from \"../Tweet/default_profile.png\";\nimport { AuthContext } from \"../../store/auth-context\";\nimport axiosInstance from \"../../axiosInstance\";\n\nconst AddReply = (props) => {\n  const replyContent = useRef(\"\");\n  const { userData } = useContext(AuthContext)\n\n  const formSubmitHandler = (e) => {\n    e.preventDefault();\n\n    if (!!userData) {\n      if (replyContent.current.value.trim().length > 0) {\n        sendData();\n      }\n    } else {\n      props.onError(\n        <p>\n          Please <Link to=\"/login\">login</Link> before adding a tweet.\n        </p>\n      );\n    }\n  };\n\n  async function sendData() {\n    const response = await axiosInstance.post(`tweets/${props.tweetId}/reply`, {\n      text: replyContent.current.value,\n    });\n\n    if (response.status === 201) {\n      props.setNewReply(response.data.id);\n      replyContent.current.value = \"\";\n      return;\n    }\n  }\n\n  return (\n    <div className={classes[\"reply-section\"]}>\n      <div className={classes[\"close-reply__section\"]}>\n        <i\n          className=\"fa fa-times\"\n          aria-hidden=\"true\"\n          onClick={() => props.hideReply()}\n          style={{ cursor: \"pointer\" }}\n        ></i>\n      </div>\n      <div className={classes[\"user__info\"]}>\n        <div className={classes[\"user-info__left\"]}>\n          <img src={props.picture} alt=\"Profile\" />\n        </div>\n        <div className={classes[\"user-info__right\"]}>\n          <div className={classes[\"user__names\"]}>\n            <p id={classes[\"fullname\"]}>\n              {`${props.firstname} ${props.lastname}`}\n            </p>\n            <p id={classes[\"username\"]}>{props.username}</p>\n            <p>·</p>\n            <p id={classes[\"time-created\"]}>{props.timeCreated}</p>\n          </div>\n          <div className={classes[\"tweet-content\"]}>{props.content}</div>\n        </div>\n      </div>\n      <form\n        id=\"add-reply\"\n        className={classes[\"add-reply__form\"]}\n        onSubmit={formSubmitHandler}\n      >\n        <div className={classes[\"add-reply__upper\"]}>\n          {!!userData ? (\n            <img\n              className={classes[\"add-reply__image\"]}\n              src={userData.picture}\n              alt=\"Default profile\"\n            />\n          ) : (\n            <img\n              className={classes[\"add-reply__image\"]}\n              src={Profile}\n              alt=\"Default profile\"\n            />\n          )}\n          <textarea\n            className={classes[\"add-reply__input\"]}\n            placeholder=\"Tweet your reply\"\n            ref={replyContent}\n            name=\"reply\"\n          />\n        </div>\n        <div className={classes[\"add-reply__lower\"]}>\n          <div className={classes[\"btn-container\"]}>\n            <button className=\"btn\" type=\"submit\">\n              Reply\n            </button>\n          </div>\n        </div>\n      </form>\n    </div>\n  );\n};\n\nexport default AddReply;\n","import React, { useCallback, useEffect, useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport axiosInstance from \"../axiosInstance\";\n\nconst SaveTweet = (props) => {\n  const navigate = useNavigate();\n  const isLoggedIn = !!localStorage.getItem(\"authTokens\");\n  const [isSaved, setIsSaved] = useState(null);\n  const [hasStarted, setHasStarted] = useState(false);\n  const [hasFinished, setHasFinished] = useState(false);\n  const [forceRefresh, setForceRefresh] = useState(null);\n\n  const checkForSave = useCallback(async () => {\n    try {\n      const response = await axiosInstance.get(`bookmarks/${props.tweetId}/check`)\n      if (response.status === 200) setIsSaved(true)\n    } catch(err) {\n      console.clear()\n      if (err.response.status === 404)\n      setIsSaved(false)\n    }\n  }, [props.tweetId]);\n\n  useEffect(() => {\n    if (isLoggedIn) {\n      setHasStarted(true);\n      checkForSave();\n      setHasFinished(true);\n    } else {\n      setHasStarted(true);\n      setHasFinished(true);\n    }\n  }, [forceRefresh, checkForSave, isLoggedIn]);\n\n  const saveTweetHandler = async (e) => {\n    e.stopPropagation();\n    if (!isLoggedIn) {\n      navigate(\"/login\");\n    }\n    const response = await axiosInstance.post(`tweets/${props.tweetId}/create-bookmark`);\n\n    if (response.status === 201) setForceRefresh(Date.now());\n  };\n\n  const removeFromSavedHandler = async (e) => {\n    e.stopPropagation();\n    const response = await axiosInstance.delete(`bookmarks/${props.tweetId}/delete`);\n\n    if (response.status === 204) {\n      setForceRefresh(Date.now()); // refresh the save component\n      if (props.isBookmarkPage) props.setNeedRefreshTweetList(Date.now()); // refresh the tweetlist component when a use deletes a saved tweet object if we are in book marks page\n    }\n  };\n\n  if (isSaved && hasStarted && hasFinished) {\n    return (\n      <i\n        className=\"fas fa-save fa-lg\"\n        aria-hidden=\"true\"\n        onClick={removeFromSavedHandler}\n      ></i>\n    ); // saved before\n  } else if (!isSaved && hasStarted && hasFinished) {\n    return (\n      <i\n        className=\"far fa-save fa-lg\"\n        aria-hidden=\"true\"\n        onClick={saveTweetHandler}\n      ></i>\n    ); // not saved before\n  }\n};\n\nexport default SaveTweet;\n","import React, { useState, useEffect } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport LikeButton from \"../LikeButton\";\nimport UnlikeButton from \"../UnlikeButton\";\nimport classes from \"./TweetStyle.module.css\";\nimport AddReply from \"../Reply/AddReply\";\nimport ErrorMessage from \"../Modal/ErrorMessage\";\nimport Overlay from \"../Modal/Overlay\";\nimport SaveTweet from \"../SaveTweet\";\nimport axiosInstance from \"../../axiosInstance\";\n\nconst Tweet = (props) => {\n  const userLink = `#/get-profile/${props.username}`;\n  const navigate = useNavigate();\n  const [isLoading, setIsLoading] = useState(false);\n  const [hasStarted, setHasStarted] = useState(false);\n  const [likeOrDislike, setLikeOrDislike] = useState(null);\n  const [likeClicked, setLikeClicked] = useState(null);\n  const [fakeLikeNumber, setFakeLikeNumber] = useState(props.likes); // This is a fake number, when a user adds a like to a post, it is going to be in db, but instead refreshing the data from db, i set this fake number for number of likes, which is the same as the real one.\n  const isLoggedIn = !!localStorage.getItem(\"authTokens\");\n  const [isAddReplyVisible, setIsAddReplyVisible] = useState(false);\n  const [hasError, setHasError] = useState(false);\n  const [errorMessage, setErrorMessage] = useState(null);\n  const [, setNewReply] = useState(null);\n\n  const showReply = () => {\n    setIsAddReplyVisible(true);\n    document.getElementById(\"add-reply__container\").classList.remove(\"hidden\");\n  };\n\n  const hideReply = () => {\n    setIsAddReplyVisible(false);\n    document.getElementById(\"add-reply__container\").classList.add(\"hidden\");\n  };\n\n  const showErrorMessageHandler = (message) => {\n    setErrorMessage(message);\n    setHasError(true);\n  };\n\n  const errorMessageCloseHandler = () => {\n    setErrorMessage(null);\n    setHasError(false);\n  };\n\n  const checkForLikeButton = async () => {\n    setHasStarted(true);\n    setIsLoading(true);\n    if (isLoggedIn) {\n      await axiosInstance\n        .get(`like/${props.tweetId}/check`)\n        .then((res) => {\n          if (res.status === 200) {\n            setLikeOrDislike(\n              <UnlikeButton\n                likeId={res.data.id}\n                likes={fakeLikeNumber}\n                setFakeLikeNumber={setFakeLikeNumber}\n                setLikeClicked={setLikeClicked}\n              />\n            );\n          } else {\n            throw res.status;\n          }\n        })\n        .catch(() => {\n          console.clear()\n          setLikeOrDislike(\n            <LikeButton\n              tweetId={props.tweetId}\n              likes={fakeLikeNumber}\n              setFakeLikeNumber={setFakeLikeNumber}\n              setLikeClicked={setLikeClicked}\n            />\n          );\n        });\n    }\n    setIsLoading(false);\n  }\n\n  useEffect(() => {\n    checkForLikeButton();\n  }, [likeClicked]);\n\n  let likeButton;\n  if (isLoggedIn) {\n    likeButton = (\n      <div title=\"Like\">{!isLoading && hasStarted && likeOrDislike}</div>\n    );\n  } else {\n    likeButton = (\n      <div title=\"Like\">\n        <i className=\"fa fa-heart-o\" onClick={() => navigate(\"/login\")} />\n        <p>{props.likes}</p>\n      </div>\n    );\n  }\n\n  const tweetDetailNavigateHandler = () => {\n    navigate(`/tweets/${props.tweetId}`);\n  };\n\n  return (\n    <React.Fragment>\n      {hasError && (\n        <ErrorMessage\n          errorMessage={errorMessage}\n          onClose={errorMessageCloseHandler}\n        />\n      )}\n      <Overlay\n        isVisible={isAddReplyVisible}\n        onOverlayClick={() => hideReply()}\n      />\n      <section\n        id=\"add-reply__container\"\n        className=\"add-reply__container hidden\"\n      >\n        <AddReply\n          onError={showErrorMessageHandler}\n          tweetId={props.tweetId}\n          username={props.user}\n          firstname={props.firstname}\n          lastname={props.lastname}\n          timeCreated={props.timeCreated}\n          picture={props.picture}\n          content={props.content}\n          hideReply={hideReply}\n          setNewReply={setNewReply}\n        />\n      </section>\n      <div className={classes.tweet} onClick={tweetDetailNavigateHandler}>\n        <div className={classes[\"tweet-left\"]}>\n          <img src={props.picture} alt=\"Profile\" style={{objectFit: 'cover'}} />\n        </div>\n        <div className={classes[\"tweet-right\"]}>\n          <div className={classes[\"tweet-right__top\"]}>\n            <div className={classes[\"user-info\"]}>\n              <a id={classes[\"user-name\"]} href={userLink}>\n                {props.firstname} {props.lastname}\n              </a>\n              <a id={classes[\"username\"]} href={userLink}>\n                {props.username}\n              </a>\n              <a id={classes[\"tweet-dot\"]} href={userLink}>\n                ·\n              </a>\n              <a id={classes[\"tweet__time-created\"]} href={userLink}>\n                {props.timeCreated}\n              </a>\n            </div>\n            {/* <div className={classes.more}>\n              <div></div>\n              <div></div>\n              <div></div>\n            </div> */}\n          </div>\n          <div className={classes[\"tweet-content\"]}>{props.content}</div>\n          <div className={classes[\"tweet-right__bottom\"]}>\n            <div\n              title=\"Reply\"\n              onClick={(e) => {\n                e.stopPropagation();\n                showReply();\n              }}\n            >\n              <i className=\"fa fa-reply\" />\n              <p>{props.reply}</p>\n            </div>\n            {likeButton}\n            <div title=\"Save\">\n              <SaveTweet\n                tweetId={props.tweetId}\n                setHasError={setHasError}\n                setErrorMessage={setErrorMessage}\n                setNeedRefreshTweetList={props.setNeedRefresh}\n                isBookmarkPage={props.isBookmarkPage}\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n    </React.Fragment>\n  );\n};\n\nexport default Tweet;\n","import classes from \"./TweetStyle.module.css\";\nimport Tweet from \"./Tweet\";\nimport dateTimeGenerator from \"../../utils\";\n\nconst TweetList = (props) => {\n  if (!props.tweetList)\n    return (\n      <section className={classes[\"no-tweet\"]}>\n        <p>No tweet was found, Please check your internet connection.</p>\n      </section>\n    );\n  return (\n    <section id=\"tweet-list\" className={classes[\"tweet-list\"]}>\n      {props.tweetList.length!==0 ? props.tweetList.map((tweet) => (\n        <Tweet\n          tweetId={tweet.id}\n          key={tweet.id}\n          firstname={tweet.user.firstname}\n          lastname={tweet.user.lastname}\n          username={tweet.user.username}\n          picture={tweet.user.picture}\n          timeCreated={dateTimeGenerator(\n            tweet.date_created.created_ago,\n            tweet.date_created.created\n          )}\n          content={tweet.content}\n          reply={tweet.tweetReply}\n          retweet={tweet.tweetRetweets}\n          likes={tweet.likes.length}\n          isBookmarkPage={props.isBookmarkPage}\n          setNeedRefresh={props.setNeedRefresh}\n        />\n      )) : <p className=\"p-info--center\">No posts yet!</p>}\n    </section>\n  );\n};\n\nexport default TweetList;\n","import React from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport axiosInstance from \"../axiosInstance\";\n\nconst UnlikeButton = (props) => {\n  const navigate = useNavigate()  \n  const isLoggedIn = !!localStorage.getItem(\"authTokens\");\n\n  const likeHandler = async (e) => {\n    e.stopPropagation()\n    if (!isLoggedIn) {\n      navigate(\"/login\");\n    } else {\n      const response = await axiosInstance.delete(`remove-like/${props.likeId}`);\n      if (response.status === 204) {\n        props.setFakeLikeNumber(prevNum => prevNum -1)\n        props.setLikeClicked(false)\n      }\n    }\n  };\n  return (\n    <div>\n      <i className=\"fa fa-heart\" style={{color: 'red'}} onClick={likeHandler} />\n      <p>{props.likes}</p>\n    </div>\n  );\n};\n\nexport default UnlikeButton;\n","import { useRef, useContext, useEffect, useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport classes from \"./TweetStyle.module.css\";\nimport ProfilePicture from \"./default_profile.png\";\nimport { ServerContext } from \"../../store/server-context\";\nimport { AuthContext } from \"../../store/auth-context\";\nimport axiosInstance from \"../../axiosInstance\";\n\nconst AddTweet = (props) => {\n  const tweetContent = useRef(\"\");\n  const isLoggedIn = !!localStorage.getItem(\"authTokens\");\n  const { userData } = useContext(AuthContext)\n  const { serverURL } = useContext(ServerContext);\n  const [needToRefresh, setNeedToRefresh] = useState(null);\n\n  useEffect(() => {}, [needToRefresh])\n\n  const formSubmitHandler = (e) => {\n    e.preventDefault();\n\n    if (isLoggedIn) {\n      if (tweetContent.current.value.trim().length > 0) {\n        sendData();\n      }\n    } else {\n      props.setIsOverlayVisible(true)\n      props.onError(\n        <p>\n          Please <Link to=\"/login\">login</Link> before adding a tweet.\n        </p>\n      );\n      setNeedToRefresh(Date.now());\n    }\n  };\n\n  async function sendData() {\n    const response = await axiosInstance.post(`${serverURL}compose/tweet`, {\n      content: tweetContent.current.value,\n    });\n\n    if (response.status === 201) {\n      tweetContent.current.value = \"\";\n      return;\n    }\n  }\n\n  return (\n    <form\n      id=\"add-tweet\"\n      className={classes[\"add-tweet__form\"]}\n      onSubmit={formSubmitHandler}\n    >\n      <div className={classes[\"add-tweet__upper\"]}>\n          <img\n            className={classes[\"add-tweet__image\"]}\n            src={isLoggedIn && !!userData ? userData.picture : ProfilePicture}\n            alt=\"User profile\"\n            style={{ objectFit: \"cover\" }}\n          />\n        <textarea\n          className={classes[\"add-tweet__input\"]}\n          placeholder=\"What's happening?\"\n          ref={tweetContent}\n        />\n      </div>\n      <div className={classes[\"add-tweet__lower\"]}>\n        <div className={classes[\"btn-container\"]}>\n          <button className=\"btn\" type=\"submit\">\n            Tweet\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n\nexport default AddTweet;\n","import React, { useEffect, useState, useContext } from \"react\";\nimport Searchbar from \"../components/Searchbar\";\nimport AddTweet from \"../components/Tweet/AddTweet\";\nimport TweetList from \"../components/Tweet/TweetList\";\nimport axios from \"axios\";\nimport ErrorMessage from \"../components/Modal/ErrorMessage\";\nimport Overlay from \"../components/Modal/Overlay\";\nimport { ServerContext } from \"../store/server-context\";\nimport { AuthContext } from \"../store/auth-context\";\nimport ProfilePicture from \"../components/Tweet/default_profile.png\";\n\nconst HomePage = (props) => {\n  const [tweetList, setTweetList] = useState([]);\n  const [hasError, setHasError] = useState(false);\n  const [errorMessage, setErrorMessage] = useState(null);\n  const { serverURL } = useContext(ServerContext);\n  const { userData } = useContext(AuthContext);\n  const [isOverlayVisible, setIsOverlayVisible] = useState(false);\n  \n  const getTweets = async () => {\n    const response = await axios.get(`${serverURL}home`);\n\n    if (response.status === 200) setTweetList(response.data);\n  };\n\n  useEffect(() => {\n    getTweets();\n  }, []);\n\n  const showErrorMessageHandler = (message) => {\n    setErrorMessage(message);\n    setHasError(true);\n  };\n\n  const errorMessageCloseHandler = () => {\n    setErrorMessage(null);\n    setHasError(false);\n    setIsOverlayVisible(false);\n  };\n\n  const onOverlayClick = () => {\n    setIsOverlayVisible(false);\n    setHasError(false);\n    setErrorMessage(false);\n    props.setIsMenuOpen(false)\n  };\n\n  return (\n    <React.Fragment>\n      <Overlay onOverlayClick={onOverlayClick} isVisible={isOverlayVisible} />\n      {hasError && (\n        <ErrorMessage\n          errorMessage={errorMessage}\n          onClose={errorMessageCloseHandler}\n        />\n      )}\n      <div className=\"main__middle-side\" id=\"homepage-middle\">\n        <section className=\"menu-btn__section\">\n          <img\n            src={!!userData ? userData.picture : ProfilePicture}\n            alt=\"Profile\"\n            onClick={() => {\n              setIsOverlayVisible(true);\n              props.onMenuClick();\n            }}\n            style={{ objectFit: \"cover\" }}\n          />\n          <div\n            className=\"ham-menu__btn\"\n            onClick={() => {\n              setIsOverlayVisible(true);\n              props.onMenuClick();\n            }}\n          >\n            <div></div>\n            <div></div>\n            <div></div>\n          </div>\n          <p>{props.pageName}</p>\n        </section>\n        <AddTweet\n          onError={showErrorMessageHandler}\n          setIsOverlayVisible={setIsOverlayVisible}\n        />\n        <TweetList tweetList={tweetList} isBookmarkPage={false} />\n      </div>\n      <div className=\"main__right-side\">\n        <Searchbar />\n      </div>\n    </React.Fragment>\n  );\n};\n\nexport default HomePage;\n","// extracted by mini-css-extract-plugin\nexport default {\"reply-section\":\"Reply_reply-section__BbnCc\",\"user__info\":\"Reply_user__info__UitVu\",\"user-info__left\":\"Reply_user-info__left__qR7yp\",\"user-info__right\":\"Reply_user-info__right__M3A23\",\"user__names\":\"Reply_user__names__6lVy1\",\"link--underline\":\"Reply_link--underline__IUIu6\",\"fullname\":\"Reply_fullname__lqRK6\",\"tweet-content\":\"Reply_tweet-content__GAg4T\",\"add-reply__form\":\"Reply_add-reply__form__Y1WR7\",\"add-reply__upper\":\"Reply_add-reply__upper__+Dp6b\",\"add-reply__lower\":\"Reply_add-reply__lower__yX4-S\",\"add-reply__image\":\"Reply_add-reply__image__MXGYn\",\"add-reply__input\":\"Reply_add-reply__input__kTyOX\",\"btn-container\":\"Reply_btn-container__+aEwk\",\"hidden\":\"Reply_hidden__Z2HP2\",\"reply-list\":\"Reply_reply-list__8iYMy\",\"reply\":\"Reply_reply__4J+VP\",\"reply-left\":\"Reply_reply-left__UpdBH\",\"reply-right\":\"Reply_reply-right__V+8vO\"};"],"names":["props","navigate","useNavigate","isLoggedIn","localStorage","getItem","likeHandler","e","stopPropagation","axiosInstance","tweetId","status","setFakeLikeNumber","prevNum","setLikeClicked","className","onClick","likes","ErrorMessage","errorMessage","onClose","document","getElementById","replyContent","useRef","userData","useContext","AuthContext","text","current","value","response","setNewReply","data","id","classes","hideReply","style","cursor","src","picture","alt","firstname","lastname","username","timeCreated","content","onSubmit","preventDefault","trim","length","sendData","onError","to","Profile","placeholder","ref","name","type","useState","isSaved","setIsSaved","hasStarted","setHasStarted","hasFinished","setHasFinished","forceRefresh","setForceRefresh","checkForSave","useCallback","console","clear","useEffect","saveTweetHandler","Date","now","removeFromSavedHandler","isBookmarkPage","setNeedRefreshTweetList","likeButton","userLink","isLoading","setIsLoading","likeOrDislike","setLikeOrDislike","likeClicked","fakeLikeNumber","isAddReplyVisible","setIsAddReplyVisible","hasError","setHasError","setErrorMessage","classList","add","checkForLikeButton","then","res","UnlikeButton","likeId","catch","LikeButton","title","Overlay","isVisible","onOverlayClick","AddReply","message","user","objectFit","href","remove","reply","SaveTweet","setNeedRefresh","tweetList","map","tweet","dateTimeGenerator","date_created","created_ago","created","tweetReply","retweet","tweetRetweets","color","tweetContent","serverURL","ServerContext","needToRefresh","setNeedToRefresh","setIsOverlayVisible","ProfilePicture","setTweetList","isOverlayVisible","getTweets","axios","setIsMenuOpen","onMenuClick","pageName","TweetList","Searchbar"],"sourceRoot":""}